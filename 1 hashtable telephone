#include <iostream>
#include <string>
using namespace std;

struct person
{
    string name;
    int tel;
};

class database
{
public:
    person teldi[10], hash_table1[10],hash_table2[10];
    int n, i, q, r, s, t, u, k ,m,z;
    string p;

    void read()
 {
        cout << "\nEnter the number of persons you want to enter: ";
        cin >> n;
        for (i = 0; i < 10; i++)
  {
            hash_table1[i].name = "Null";
            hash_table1[i].tel = 0;
            hash_table2[i].name = "Null";
            hash_table2[i].tel = 0;
        }
        for (i = 0; i < n; i++)
  {
            cout << "\nEnter the name: ";
            cin >> teldi[i].name;
            cout << "\nEnter telephone number: ";
            cin >> teldi[i].tel;
        }
    }

    void show() {
        cout << "\nName\t\t\t\tTelephone Number\n";
        cout<<"------------------------------------------\n";
        for (int i = 0; i < n; i++) {
            cout << teldi[i].name << "\t\t\t\t" << teldi[i].tel << endl;
        }
    }

    void ascii()
 {
        int cmp,cmp2, hash,hash2;
        for (i = 0; i < n; i++)
  {
            p = teldi[i].name;
            cout << "\n" << p << "\t";
            q = p.length();
            r = 0;
            for (s = 0; s < q; s++)
   {
                t = p[s];
                r = t + r;
            }
            cout << "Sum = " << r;
            hash=k%10;
            hash = k % 10;
            cout << "\nLinear probing: hash = " << hash;
            m=1;
            cmp = 0;
            while (hash_table1[hash].name != "Null") {
                cout << "\nCollision";
                hash = (hash + 1) % 10;
                cout << "---> New hash = " << hash;
                cmp++;
            }
            cout << "\nTotal number of collisions = " << cmp;
            //hash_table1[hash] = teldi[i];
            cmp2=0;
            hash2=k%10;
            cout << "\nQuadratic probing: hash2 = " << hash2;    
            while (hash_table2[hash2].name != "Null") {
                cout << "\nCollision";
                z=m*m;
                hash2= (hash2 + z) % 10;
                m++;
                cmp2++;
                cout << "---> New hash2 = " << hash2;
                
            }
            cout << "\nTotal number of collisions = " << cmp;
            hash_table1[hash] = teldi[i];
            hash_table2[hash2] = teldi[i];
        }
    }

    void display()
 {
        cout << "\nLinear Probing\n";
        cout << "Name\t\t\t\tTelephone Number\n";
        cout<<"------------------------------------------\n";
        
        for (int i = 0; i < 10; i++)
        {
            cout << hash_table1[i].name << "\t\t\t\t" << hash_table1[i].tel << endl;
        }
        cout << "\nQuadratic Probing\n";
        cout << "Name\t\t\t\tTelephone Number\n";
        cout<<"------------------------------------------\n";
        
        for (int i = 0; i < 10; i++)
        {
            cout << hash_table2[i].name << "\t\t\t\t" << hash_table2[i].tel << endl;
        }
    }

    void search() {
        int i, key, cmp,cmp2;
        cout << "\nEnter the telephone number: ";
        cin >> key;
        cmp=1;
        for (i = 0; i < 10; i++) {
            if (hash_table1[i].tel == key) {
                cout << "\nLinear probing comparison = " << cmp;
                cout << "\nName found: " << hash_table1[i].name;
                return;
            }
            cmp++;
        }
        cmp2 = 1;
        for (i = 0; i < 10; i++) {
            if (hash_table2[i].tel == key) {
                break;
            }
            cmp2++;
        }
        if (i >= 10)
     {
            cout << "\nTelephone number not found";
        }
        else
        {
         cout << "\nlinear probing comparison = " << cmp;
            cout << "\nquadratic probing comparison = " << cmp2;
        }

         
  }
};

int main() {
    database ob;
    ob.read();
    ob.show();
    ob.ascii();
    ob.display();
    ob.search();
    return 0;
}
